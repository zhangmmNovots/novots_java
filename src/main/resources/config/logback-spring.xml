<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration>
<configuration scan="true" scanPeriod="30 seconds">
    <springProperty scope="context" name="logPath" source="log.path"/>
    <springProperty scope="context" name="logName" source="log.name"/>
    <jmxConfigurator/>
    <!--用于区分不同应用程序的记录-->
    <!-- 彩色日志 -->

    <!-- 彩色日志依赖的渲染类 -->

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>

    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 彩色日志格式   [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n  -->

    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} [${logName}] %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>


    <!--控制台-->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">

        <encoder>

            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->

            <!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>-->

            <pattern>${CONSOLE_LOG_PATTERN}</pattern><!--彩打日志-->

            <!--解决乱码问题-->

            <charset>UTF-8</charset>

        </encoder>

    </appender>


    <!--    &lt;!&ndash; 控制台输出日志&ndash;&gt;-->
    <!--    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
    <!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--            <charset>UTF-8</charset>-->
    <!--            &lt;!&ndash;            <pattern>[%-5level] [${logName}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %logger - %msg%n</pattern>&ndash;&gt;-->
    <!--        </encoder>-->
    <!--    </appender>-->

    <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <File>${logPath}/${logName}.log</File>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <Pattern>%-5level [${logName}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %logger.%method - %msg%n</Pattern>
        </encoder>
        <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->

        <!--            <maxFileSize>100MB</maxFileSize>单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1-->

        <!--            <maxHistory>30</maxHistory>&lt;!&ndash;保存最近30天的日志&ndash;&gt;-->

        <!--            <totalSizeCap>20GB</totalSizeCap>&lt;!&ndash;所有的日志文件最大20G，超过就会删除旧的日志&ndash;&gt;-->

        <!--        </rollingPolicy>-->
    </appender>



        <root level="INFO">
            <appender-ref ref="FILE"/>
            <appender-ref ref="STDOUT"/>
        </root>


    <!--<logger name="com.zaxxer.hikari" additivity="true"  level="INFO"/>-->

</configuration>
